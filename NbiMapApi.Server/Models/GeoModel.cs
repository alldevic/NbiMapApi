// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using NbiMapApi.Server.Models;
//
//    var geoModel = GeoModel.FromJson(jsonString);

using NbiMapApi.Server.Converters;

namespace NbiMapApi.Server.Models
{
    using System.Collections.Generic;
    using Newtonsoft.Json;

    public partial class GeoModel
    {
        [JsonProperty("type")] public string Type { get; set; }

        [JsonProperty("features")] public List<Feature> Features { get; set; }
    }

    public class Feature
    {
        [JsonProperty("type")] public FeatureType Type { get; set; }

        [JsonProperty("geometry")] public Geometry Geometry { get; set; }

        [JsonProperty("properties")] public Properties Properties { get; set; }

        [JsonProperty("options")] public Options Options { get; set; }
    }

    public class Geometry
    {
        [JsonProperty("type")] public GeometryType Type { get; set; }

        [JsonProperty("coordinates")] public List<double> Coordinates { get; set; }
    }

    public class Options
    {
        [JsonProperty("preset")] public Preset Preset { get; set; }
    }

    public class Properties
    {
        [JsonProperty("balloonContent")] public string BalloonContent { get; set; }

        [JsonProperty("hintContent")] public string HintContent { get; set; }

        [JsonProperty("iconContent", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? IconContent { get; set; }
    }

    public enum GeometryType
    {
        Point
    };

    public enum Preset
    {
        IslandsBlueDotIcon,
        IslandsGreenDotIcon,
        IslandsPinkDotIcon,
        IslandsPinkIcon,
        IslandsVioletDotIcon,
        IslandsVioletIcon
    };

    public enum FeatureType
    {
        Feature
    };

    public partial class GeoModel
    {
        public static GeoModel FromJson(string json) =>
            JsonConvert.DeserializeObject<GeoModel>(json, Converter.Settings);
    }

    
}